nonHourlyLineItems[rateName == "Recovery of 2015 Foregone Revenue", rateAmount] +
nonHourlyLineItems[rateName == "Recovery of 2016 Foregone Revenue", rateAmount]
testthat::expect_equal(bill_customerCharge, gen_customerCharge, tolerance = 0.01)
# Checking Transformer Allowance within 1%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*adjKva, tolerance = 0.01)
##
# Checking Distribution Charges within 1%;
# Transformer Allowance is the only DEMAND_BASED, DISTRIBUTION charge that isn't
# rolled up into the bill distribution charges
##
gen_distributionCharges = nonHourlyLineItems[rateName == "Distribution Volumetric Rate", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of LRAM Variance Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of the Gain on the Sale of Named Properties", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of Hydro One Capital Contributions Variance", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Application of IFRS - 2014 Derecognition", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of 2015 Foregone Revenue - Demand", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of 2016 Foregone Revenue - Demand", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Deferral/Variance Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Capacity Based Recovery Class B Variance Sub-Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Application of Operations Center Consolidation Plan Sharing", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Post-Employment Benefit - Tax Savings", rateAmount]*adjKva
testthat::expect_equal(bill_distributionCharges, gen_distributionCharges, tolerance = 0.01)
# Checking Network Charges within 1%
testthat::expect_equal(bill_networkCharge, nonHourlyLineItems[rateName == "Network - Peak", rateAmount]*peakKw, 0.01)
lse <- "north bay"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="North Bay Hydro", lseId]
northBayTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30")
print(northBayTariffs[, .(masterTariffId, tariffName)])
# Get the specific tariff rate information
northBayGeneralHourly <- e.tariff::genability_rate(northBayTariffs[tariffName == "General - Demand 3000 - 4999 kW, Hourly", masterTariffId],
effectiveOn = "2017-09-30")
# Looked at the non-hourly version for comparison
# northBayGeneralHourly <- e.tariff::genability_rate(northBayTariffs[tariffName == "General - Demand 3000 - 4999 kW", masterTariffId],
#                                                   effectiveOn = "2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- northBayGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, northBayGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
# Billing Data - October 2017 Statement
adjKwh <- 1461273.10
adjKw <- 2475.00
peakKw <- 2459.16  # max kW during 7 to 7
adjKva <- 2495.56
bill_fixedCharge = 6484.73  # Sum of all fixed charges?
bill_transformerAllowance = 1497.34  # CR
bill_variableCharge = 1755.07
bill_networkCharge = 6630.39
# Checking fixed customer charge within 5% -- See note below about Genability being wrong
# NOTE - Using charge from the official tariff documentation
# gen_fixedCharge = nonHourlyLineItems[chargeType == "FIXED_PRICE", sum(rateAmount)]
testthat::expect_equal(bill_fixedCharge, 6484.73, tolerance = 0.01)
# Checking Transformer Allowance within 1%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*adjKva, tolerance = 0.01)
# It's not clear from the tariff documentation which line items should be in the variableCharge
# bill_variableCharge / adjKva
# Checking Network Charges within 1%
# NOTE - Using charge from the official tariff documentation
testthat::expect_equal(bill_networkCharge, 2.6962*peakKw, 0.01)
lse <- "orillia"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="Orillia Power", lseId]
orilliaTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30")
print(orilliaTariffs[, .(masterTariffId, tariffName)])
# Get the specific tariff rate information
orilliaGeneralHourly <- e.tariff::genability_rate(orilliaTariffs[tariffName == "General - Demand, Hourly", masterTariffId],
effectiveOn = "2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- orilliaGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, orilliaGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
# Billing Data - October 2017 Statement (due date of 2017-11-06)
adjKwh <- 778093.29
adjKw <- 1295.88
peakKw <- 1295.88  # max kW during 7 to 7
adjKva <- 1385.93
bill_deliveryCharge <- 10951.66
bill_regulatoryCharge <- 3034.80
billDebtRetirementCharge <- 3610.13
gen_serviceCharge <- nonHourlyLineItems[rateName == "Service Charge", rateAmount]
gen_distributionVolumetricRate <- nonHourlyLineItems[rateName == "Distribution Volumetric Rate", rateAmount]
# reg prefix means from regulation documentation
reg_rateRiderGAAccount <- 0.0015  # Per kWh
# gen_rateRiderGAAcount <- nonHourlyLineItems[rateName == "Service Charge", rateAmount]
# reg_rateRiderLRAMVA <- 0.5041  # Per kW
gen_rateRiderLRAMVA <- nonHourlyLineItems[rateName == "Rate Rider for Disposition of Lost Revenue Adjustment Mechanism Variance Account", rateAmount]
# reg_rateRiderDeferralVariance <- 0.7478  # Per kW
gen_rateRiderDeferralVariance <- nonHourlyLineItems[rateName == "Rate Rider for Disposition of Deferral/Variance Accounts", rateAmount]
# reg_lowVoltageService <- 0.2230  # Per kW
gen_lowVoltageService <- nonHourlyLineItems[rateName == "Low Voltage Service Rate", rateAmount]
# reg_rateRiderTaxChange <- -0.0155  # Per kW
gen_rateRiderTaxChange <- -1*nonHourlyLineItems[rateName == "Rate Rider for Application of Tax Change", rateAmount]
reg_rateRiderCBR <- 0.0951  # Per kW
# reg_networkTransmission <- 1.9691  # Per kW
gen_networkTransmission <- nonHourlyLineItems[rateName =="Retail Transmission Rate - Line and Transformation Connection Service Rate", rateAmount]
# reg_transmissionConsumption <- 1.6091  # Per kW
gen_transmissionConsumption <- nonHourlyLineItems[rateName == "Retail Transmission Rate - Network Service Rate", rateAmount]
# Trying to re-create the delivery rate
# kW charges + kWh rate rider for GAAccount + customer charge
delivery_component <- (gen_distributionVolumetricRate +
# gen_rateRiderLRAMVA +
# gen_rateRiderDeferralVariance +
# gen_lowVoltageService +
# gen_rateRiderTaxChange +
gen_networkTransmission +
gen_transmissionConsumption) * peakKw +
gen_serviceCharge +
reg_rateRiderGAAccount*adjKwh
# Matches within 2%, tried multiple months
testthat::expect_equal(delivery_component, bill_deliveryCharge, 0.02)
library(e.tariff)
library(magrittr)
library(data.table)
library(testthat)
library(model.e)
View(battery_quote)
shiny::runApp('Code/Nadir-Enterprise-Github/artemis')
library(e.tariff)
library(magrittr)
library(data.table)
library(testthat)
lse <- "veridian"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="Veridian Connection", lseId]
veridianTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30", pageCount=100)
print(veridianTariffs[, .(masterTariffId, tariffName)])
veridianGeneralHourly <- e.tariff::genability_rate(veridianTariffs[tariffName == "General - Demand 50-2999 kW, Hourly", masterTariffId],effectiveOn="2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- veridianGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, veridianGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
# Billing Data - October 2017 Statement
kwh <- 627001
adjKwh <- kwh*1.0482  # adjusted for losses IAW footnote
peakKw <- 1008.75  # max kW during 7 to 7
bill_customerCharge = 107.98
bill_transformerAllowance = 618.75  # CR
bill_networkCharge = 3032.50
bill_deliveryCharge = 3010.43
# Check the customer charge (Service Charge) is within 1%
testthat::expect_equal(bill_customerCharge, nonHourlyLineItems[rateName == "Service Charge", rateAmount], tolerance = 0.01)
# Check the transformer credit is within 3%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*peakKw, tolerance = 0.03)
# Check that Transmission Network Charge is within 1%
testthat::expect_equal(bill_networkCharge, nonHourlyLineItems[rateName == "Retail Transmission Rate - Network Service Rate", rateAmount]*peakKw, 0.01)
# Check that delivery charge is within 1% -- Unable to re-create
# Need to reference page 5 of 13 in Veridian Connections, Inc. Tariff of Rates and Charges from regulatory filing
gen_deliveryCharge <- nonHourlyLineItems[rateName == "Distribution Volumetric Rate", rateAmount] * peakKw +
# nonHourlyLineItems[rateName == "Low Voltage Service Rate", rateAmount] * peakKw +
nonHourlyLineItems[rateName == "Disposition of Lost Revenue Adjustment Mechanism Variance Account (LRAMVA) (2017)", rateAmount] * peakKw
# testthat::expect_equal(gen_deliveryCharge, bill_deliveryCharge, 0.01)
lse <- "toronto hydro"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="Toronto Hydro", lseId]
torontoHydroTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30")
print(torontoHydroTariffs[, .(masterTariffId, tariffName)])
# Get the specific tariff rate information
torontoGeneralHourly <- e.tariff::genability_rate(torontoHydroTariffs[tariffName == "General - Demand, 50 kW to 999 kW, Hourly", masterTariffId],
effectiveOn = "2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- torontoGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, torontoGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
# Billing Data - October 2017 Statement
adjKwh <- 571395.912
adjKw <- 867.636
peakKw <- 867.636  # max kW during 7 to 7
adjKva <- 1243.935
bill_customerCharge = 52.95  # Customer charge is per 30 days
bill_transformerAllowance = 771.24
bill_distributionCharges = 12376.88
bill_networkCharge = 2261.49
# Checking fixed customer charge within 1%
gen_customerCharge = nonHourlyLineItems[rateName == "Customer Charge", rateAmount] +
nonHourlyLineItems[rateName == "Recovery of Stranded Meter Assets", rateAmount] +
nonHourlyLineItems[rateName == "Recovery of 2015 Foregone Revenue", rateAmount] +
nonHourlyLineItems[rateName == "Recovery of 2016 Foregone Revenue", rateAmount]
testthat::expect_equal(bill_customerCharge, gen_customerCharge, tolerance = 0.01)
# Checking Transformer Allowance within 1%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*adjKva, tolerance = 0.01)
##
# Checking Distribution Charges within 1%;
# Transformer Allowance is the only DEMAND_BASED, DISTRIBUTION charge that isn't
# rolled up into the bill distribution charges
##
gen_distributionCharges = nonHourlyLineItems[rateName == "Distribution Volumetric Rate", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of LRAM Variance Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of the Gain on the Sale of Named Properties", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of Hydro One Capital Contributions Variance", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Application of IFRS - 2014 Derecognition", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of 2015 Foregone Revenue - Demand", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of 2016 Foregone Revenue - Demand", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Deferral/Variance Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Capacity Based Recovery Class B Variance Sub-Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Application of Operations Center Consolidation Plan Sharing", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Post-Employment Benefit - Tax Savings", rateAmount]*adjKva
testthat::expect_equal(bill_distributionCharges, gen_distributionCharges, tolerance = 0.01)
# Checking Network Charges within 1%
testthat::expect_equal(bill_networkCharge, nonHourlyLineItems[rateName == "Network - Peak", rateAmount]*peakKw, 0.01)
lse <- "north bay"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="North Bay Hydro", lseId]
northBayTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30")
print(northBayTariffs[, .(masterTariffId, tariffName)])
# Get the specific tariff rate information
northBayGeneralHourly <- e.tariff::genability_rate(northBayTariffs[tariffName == "General - Demand 3000 - 4999 kW, Hourly", masterTariffId],
effectiveOn = "2017-09-30")
# Looked at the non-hourly version for comparison
# northBayGeneralHourly <- e.tariff::genability_rate(northBayTariffs[tariffName == "General - Demand 3000 - 4999 kW", masterTariffId],
#                                                   effectiveOn = "2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- northBayGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, northBayGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
testthat::expect_equal(bill_fixedCharge, gen_fixedCharge, tolerance = 0.01)
# Billing Data - October 2017 Statement
adjKwh <- 1461273.10
adjKw <- 2475.00
peakKw <- 2459.16  # max kW during 7 to 7
adjKva <- 2495.56
bill_fixedCharge = 6484.73  # Sum of all fixed charges?
bill_transformerAllowance = 1497.34  # CR
bill_variableCharge = 1755.07
bill_networkCharge = 6630.39
# Checking fixed customer charge within 5% -- See note below about Genability being wrong
# NOTE - Using charge from the official tariff documentation
gen_fixedCharge = nonHourlyLineItems[chargeType == "FIXED_PRICE", sum(rateAmount)]
testthat::expect_equal(bill_fixedCharge, gen_fixedCharge, tolerance = 0.01)
# Checking Transformer Allowance within 1%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*adjKva, tolerance = 0.01)
# It's not clear from the tariff documentation which line items should be in the variableCharge
# bill_variableCharge / adjKva
# Checking Network Charges within 1%
# NOTE - Using charge from the official tariff documentation
testthat::expect_equal(bill_networkCharge, 2.6962*peakKw, 0.01)
# Billing Data - October 2017 Statement
adjKwh <- 1461273.10
adjKw <- 2475.00
peakKw <- 2459.16  # max kW during 7 to 7
adjKva <- 2495.56
bill_fixedCharge = 6484.73  # Sum of all fixed charges?
bill_transformerAllowance = 1497.34  # CR
bill_variableCharge = 1755.07
bill_networkCharge = 6630.39
# Checking fixed customer charge within 5% -- See note below about Genability being wrong
# NOTE - Using charge from the official tariff documentation
gen_fixedCharge = nonHourlyLineItems[chargeType == "FIXED_PRICE", sum(rateAmount)]
testthat::expect_equal(bill_fixedCharge, gen_fixedCharge, tolerance = 0.01)
# Checking Transformer Allowance within 1%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*adjKva, tolerance = 0.01)
# It's not clear from the tariff documentation which line items should be in the variableCharge
# bill_variableCharge / adjKva
# Checking Network Charges within 1%
# NOTE - Using charge from the official tariff documentation
gen_networkCharge <- nonHourlyLineItems[rateName == "Retail Transmission - Network Service Rate - Interval Metered"]
testthat::expect_equal(bill_networkCharge, gen_networkCharge*peakKw, 0.01)
# Checking Network Charges within 1%
# NOTE - Using charge from the official tariff documentation
gen_networkCharge <- nonHourlyLineItems[rateName == "Retail Transmission - Network Service Rate - Interval Metered", rateAmount]
testthat::expect_equal(bill_networkCharge, gen_networkCharge*peakKw, 0.01)
library(e.tariff)
library(magrittr)
library(data.table)
library(testthat)
lse <- "veridian"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="Veridian Connection", lseId]
veridianTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30", pageCount=100)
print(veridianTariffs[, .(masterTariffId, tariffName)])
veridianGeneralHourly <- e.tariff::genability_rate(veridianTariffs[tariffName == "General - Demand 50-2999 kW, Hourly", masterTariffId],effectiveOn="2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- veridianGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, veridianGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
# Billing Data - October 2017 Statement
kwh <- 627001
adjKwh <- kwh*1.0482  # adjusted for losses IAW footnote
peakKw <- 1008.75  # max kW during 7 to 7
bill_customerCharge = 107.98
bill_transformerAllowance = 618.75  # CR
bill_networkCharge = 3032.50
bill_deliveryCharge = 3010.43
# Check the customer charge (Service Charge) is within 1%
testthat::expect_equal(bill_customerCharge, nonHourlyLineItems[rateName == "Service Charge", rateAmount], tolerance = 0.01)
# Check the transformer credit is within 3%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*peakKw, tolerance = 0.03)
# Check that Transmission Network Charge is within 1%
testthat::expect_equal(bill_networkCharge, nonHourlyLineItems[rateName == "Retail Transmission Rate - Network Service Rate", rateAmount]*peakKw, 0.01)
# Check that delivery charge is within 1% -- Unable to re-create
# Need to reference page 5 of 13 in Veridian Connections, Inc. Tariff of Rates and Charges from regulatory filing
gen_deliveryCharge <- nonHourlyLineItems[rateName == "Distribution Volumetric Rate", rateAmount] * peakKw +
# nonHourlyLineItems[rateName == "Low Voltage Service Rate", rateAmount] * peakKw +
nonHourlyLineItems[rateName == "Disposition of Lost Revenue Adjustment Mechanism Variance Account (LRAMVA) (2017)", rateAmount] * peakKw
# testthat::expect_equal(gen_deliveryCharge, bill_deliveryCharge, 0.01)
lse <- "toronto hydro"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="Toronto Hydro", lseId]
torontoHydroTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30")
print(torontoHydroTariffs[, .(masterTariffId, tariffName)])
# Get the specific tariff rate information
torontoGeneralHourly <- e.tariff::genability_rate(torontoHydroTariffs[tariffName == "General - Demand, 50 kW to 999 kW, Hourly", masterTariffId],
effectiveOn = "2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- torontoGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, torontoGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
# Billing Data - October 2017 Statement
adjKwh <- 571395.912
adjKw <- 867.636
peakKw <- 867.636  # max kW during 7 to 7
adjKva <- 1243.935
bill_customerCharge = 52.95  # Customer charge is per 30 days
bill_transformerAllowance = 771.24
bill_distributionCharges = 12376.88
bill_networkCharge = 2261.49
# Checking fixed customer charge within 1%
gen_customerCharge = nonHourlyLineItems[rateName == "Customer Charge", rateAmount] +
nonHourlyLineItems[rateName == "Recovery of Stranded Meter Assets", rateAmount] +
nonHourlyLineItems[rateName == "Recovery of 2015 Foregone Revenue", rateAmount] +
nonHourlyLineItems[rateName == "Recovery of 2016 Foregone Revenue", rateAmount]
testthat::expect_equal(bill_customerCharge, gen_customerCharge, tolerance = 0.01)
# Checking Transformer Allowance within 1%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*adjKva, tolerance = 0.01)
##
# Checking Distribution Charges within 1%;
# Transformer Allowance is the only DEMAND_BASED, DISTRIBUTION charge that isn't
# rolled up into the bill distribution charges
##
gen_distributionCharges = nonHourlyLineItems[rateName == "Distribution Volumetric Rate", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of LRAM Variance Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of the Gain on the Sale of Named Properties", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of Hydro One Capital Contributions Variance", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Application of IFRS - 2014 Derecognition", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of 2015 Foregone Revenue - Demand", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Recovery of 2016 Foregone Revenue - Demand", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Deferral/Variance Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Capacity Based Recovery Class B Variance Sub-Account", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Application of Operations Center Consolidation Plan Sharing", rateAmount]*adjKva +
nonHourlyLineItems[rateName == "Disposition of Post-Employment Benefit - Tax Savings", rateAmount]*adjKva
testthat::expect_equal(bill_distributionCharges, gen_distributionCharges, tolerance = 0.01)
# Checking Network Charges within 1%
testthat::expect_equal(bill_networkCharge, nonHourlyLineItems[rateName == "Network - Peak", rateAmount]*peakKw, 0.01)
lse <- "north bay"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="North Bay Hydro", lseId]
northBayTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30")
print(northBayTariffs[, .(masterTariffId, tariffName)])
# Get the specific tariff rate information
northBayGeneralHourly <- e.tariff::genability_rate(northBayTariffs[tariffName == "General - Demand 3000 - 4999 kW, Hourly", masterTariffId],
effectiveOn = "2017-09-30")
# Looked at the non-hourly version for comparison
# northBayGeneralHourly <- e.tariff::genability_rate(northBayTariffs[tariffName == "General - Demand 3000 - 4999 kW", masterTariffId],
#                                                   effectiveOn = "2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- northBayGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, northBayGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
# Billing Data - October 2017 Statement
adjKwh <- 1461273.10
adjKw <- 2475.00
peakKw <- 2459.16  # max kW during 7 to 7
adjKva <- 2495.56
bill_fixedCharge = 6484.73  # Sum of all fixed charges?
bill_transformerAllowance = 1497.34  # CR
bill_variableCharge = 1755.07
bill_networkCharge = 6630.39
# Checking fixed customer charge within 5% -- See note below about Genability being wrong
# NOTE - Using charge from the official tariff documentation
gen_fixedCharge = nonHourlyLineItems[chargeType == "FIXED_PRICE", sum(rateAmount)]
testthat::expect_equal(bill_fixedCharge, gen_fixedCharge, tolerance = 0.01)
# Checking Transformer Allowance within 1%
testthat::expect_equal(bill_transformerAllowance, nonHourlyLineItems[rateName == "Transformer Allowance", rateAmount]*adjKva, tolerance = 0.01)
# It's not clear from the tariff documentation which line items should be in the variableCharge
# bill_variableCharge / adjKva
# Checking Network Charges within 1%
# NOTE - Using charge from the official tariff documentation
gen_networkCharge <- nonHourlyLineItems[rateName == "Retail Transmission - Network Service Rate - Interval Metered", rateAmount]
testthat::expect_equal(bill_networkCharge, gen_networkCharge*peakKw, 0.01)
lse <- "orillia"
lseInfo <- e.tariff::genability_lse(lse)
print(lseInfo)
lseId <- lseInfo[name=="Orillia Power", lseId]
orilliaTariffs <- e.tariff::genability_tariff(lseId, effectiveOn = "2017-09-30")
print(orilliaTariffs[, .(masterTariffId, tariffName)])
# Get the specific tariff rate information
orilliaGeneralHourly <- e.tariff::genability_rate(orilliaTariffs[tariffName == "General - Demand, Hourly", masterTariffId],
effectiveOn = "2017-09-30")
# Pull out the non-hourly pricing line items
nonHourlyLineItems <- orilliaGeneralHourly$detail[!grepl("Hourly Ontario Energy (Price|Charge)", rateName)]
# View the rates and prices
nonHourlyLineItems <- merge(nonHourlyLineItems, orilliaGeneralHourly$bands, by = "tariffRateId")
nonHourlyLineItems <- nonHourlyLineItems[,.(rateName, chargeType, chargeClass, quantityKey, rateAmount)] %>%
data.table::setorder(chargeType, rateName) %>%
data.table::setcolorder(c("rateName", "rateAmount"))
print(nonHourlyLineItems)
# Billing Data - October 2017 Statement (due date of 2017-11-06)
adjKwh <- 778093.29
adjKw <- 1295.88
peakKw <- 1295.88  # max kW during 7 to 7
adjKva <- 1385.93
bill_deliveryCharge <- 10951.66
bill_regulatoryCharge <- 3034.80
billDebtRetirementCharge <- 3610.13
gen_serviceCharge <- nonHourlyLineItems[rateName == "Service Charge", rateAmount]
gen_distributionVolumetricRate <- nonHourlyLineItems[rateName == "Distribution Volumetric Rate", rateAmount]
# reg prefix means from regulation documentation
reg_rateRiderGAAccount <- 0.0015  # Per kWh
# gen_rateRiderGAAcount <- nonHourlyLineItems[rateName == "Service Charge", rateAmount]
# reg_rateRiderLRAMVA <- 0.5041  # Per kW
gen_rateRiderLRAMVA <- nonHourlyLineItems[rateName == "Rate Rider for Disposition of Lost Revenue Adjustment Mechanism Variance Account", rateAmount]
# reg_rateRiderDeferralVariance <- 0.7478  # Per kW
gen_rateRiderDeferralVariance <- nonHourlyLineItems[rateName == "Rate Rider for Disposition of Deferral/Variance Accounts", rateAmount]
# reg_lowVoltageService <- 0.2230  # Per kW
gen_lowVoltageService <- nonHourlyLineItems[rateName == "Low Voltage Service Rate", rateAmount]
# reg_rateRiderTaxChange <- -0.0155  # Per kW
gen_rateRiderTaxChange <- -1*nonHourlyLineItems[rateName == "Rate Rider for Application of Tax Change", rateAmount]
reg_rateRiderCBR <- 0.0951  # Per kW
# reg_networkTransmission <- 1.9691  # Per kW
gen_networkTransmission <- nonHourlyLineItems[rateName =="Retail Transmission Rate - Line and Transformation Connection Service Rate", rateAmount]
# reg_transmissionConsumption <- 1.6091  # Per kW
gen_transmissionConsumption <- nonHourlyLineItems[rateName == "Retail Transmission Rate - Network Service Rate", rateAmount]
# Trying to re-create the delivery rate
# kW charges + kWh rate rider for GAAccount + customer charge
delivery_component <- (gen_distributionVolumetricRate +
# gen_rateRiderLRAMVA +
# gen_rateRiderDeferralVariance +
# gen_lowVoltageService +
# gen_rateRiderTaxChange +
gen_networkTransmission +
gen_transmissionConsumption) * peakKw +
gen_serviceCharge +
reg_rateRiderGAAccount*adjKwh
# Matches within 2%, tried multiple months
testthat::expect_equal(delivery_component, bill_deliveryCharge, 0.02)
library(DT)
mtcars
library(dplyr)
View(mtcars)
ggplot2::qplot(disp, mpg, mtcars)
ggplot2::qplot(disp, mpg)
ggplot2::qplot(mtcars$disp, mtcars$mpg)
faithful
?rnomr
?rnormr\
?rnorm
dummyData <- data.frame(x = 1:10, y = rnorm(mean = 10, sd = 2))
dummyData <- data.frame(x = 1:10, y = rnorm(10, mean = 10, sd = 2))
View(dummyData)
dummyData[, "y"]
shiny::runApp('Code/Personal-Github/shinytest_example/shinytest_example')
?DT::renderDataTable
?datatable
runApp('Code/Personal-Github/shinytest_example/shinytest_example')
runApp('Code/Personal-Github/shinytest_example/shinytest_example')
library(shinytest)
recordTest()
recordTest(".")
recordTest("~/Code/Personal-Github/shinytest_example/")
recordTest("~/Code/Personal-Github/shinytest_example/")
recordTest("~/Code/Personal-Github/shinytest_example")
recordTest("~/Code/Personal-Github/shinytest_example")
testApp()
setwd("~/Code/Personal-Github/shinytest_example")
testApp()
testApp()
?app$snapshot
?snapshotCompare
?snapshot
testApp()
testApp()
testApp()
testApp()
